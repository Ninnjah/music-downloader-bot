services:
  main_image:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["echo", "build completed"]
    environment:
      PYTHONUNBUFFERED: 1
      ADMIN_LIST: ${ADMIN_LIST}
      BOT_TOKEN: ${BOT_TOKEN}
      YANDEX__TOKEN: ${YANDEX__TOKEN}
      SPOTIFY__ID: ${SPOTIFY__ID}
      SPOTIFY__SECRET: ${SPOTIFY__SECRET}
      SUBSONIC__USERNAME: ${SUBSONIC__USERNAME}
      SUBSONIC__PASSWORD: ${SUBSONIC__PASSWORD}
      SUBSONIC__SALT: ${SUBSONIC__SALT}
      REDIS__ENABLED: ${REDIS__ENABLED}
      REDIS__PREFIX: ${REDIS__PREFIX}
      REDIS__HOST: ${REDIS__HOST}
      REDIS__PORT: ${REDIS__PORT}
      REDIS__DB: ${REDIS__DB}
      REDIS__PASSWORD: ${REDIS__PASSWORD}
      WEBHOOK__ENABLED: ${WEBHOOK__ENABLED}
      WEBHOOK__URL: ${WEBHOOK__URL}
      WEBHOOK__PATH: ${WEBHOOK__PATH}
      WEBHOOK__PORT: ${WEBHOOK__PORT}
  
  redis:
    image: "redis:alpine"

  bot:
    extends:
      service: main_image
    depends_on:
      - redis
    command: python bot.py
    restart: on-failure

  worker:
    extends:
      service: main_image
    volumes:
      - "${MUSIC_PATH}:/app/music"
    depends_on:
      - redis
    command: taskiq worker worker_app:broker worker.tasks --log-level INFO --workers=2
    restart: always